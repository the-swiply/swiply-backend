// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: api/event.proto

package event

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EventClient is the client API for Event service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EventClient interface {
	CreateEvent(ctx context.Context, in *CreateEventRequest, opts ...grpc.CallOption) (*CreateEventResponse, error)
	UpdateEvent(ctx context.Context, in *UpdateEventRequest, opts ...grpc.CallOption) (*UpdateEventResponse, error)
	GetEvents(ctx context.Context, in *GetEventsRequest, opts ...grpc.CallOption) (*GetEventsResponse, error)
	GetUserOwnEvents(ctx context.Context, in *GetUserOwnEventsRequest, opts ...grpc.CallOption) (*GetUserOwnEventsResponse, error)
	GetUserMembershipEvents(ctx context.Context, in *GetUserMembershipEventsRequest, opts ...grpc.CallOption) (*GetUserMembershipEventsResponse, error)
	GetEventMembers(ctx context.Context, in *GetEventMembersRequest, opts ...grpc.CallOption) (*GetEventMembersResponse, error)
	JoinEvent(ctx context.Context, in *JoinEventRequest, opts ...grpc.CallOption) (*JoinEventResponse, error)
	AcceptEventJoin(ctx context.Context, in *AcceptEventJoinRequest, opts ...grpc.CallOption) (*AcceptEventJoinResponse, error)
}

type eventClient struct {
	cc grpc.ClientConnInterface
}

func NewEventClient(cc grpc.ClientConnInterface) EventClient {
	return &eventClient{cc}
}

func (c *eventClient) CreateEvent(ctx context.Context, in *CreateEventRequest, opts ...grpc.CallOption) (*CreateEventResponse, error) {
	out := new(CreateEventResponse)
	err := c.cc.Invoke(ctx, "/swiply.event.Event/CreateEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventClient) UpdateEvent(ctx context.Context, in *UpdateEventRequest, opts ...grpc.CallOption) (*UpdateEventResponse, error) {
	out := new(UpdateEventResponse)
	err := c.cc.Invoke(ctx, "/swiply.event.Event/UpdateEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventClient) GetEvents(ctx context.Context, in *GetEventsRequest, opts ...grpc.CallOption) (*GetEventsResponse, error) {
	out := new(GetEventsResponse)
	err := c.cc.Invoke(ctx, "/swiply.event.Event/GetEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventClient) GetUserOwnEvents(ctx context.Context, in *GetUserOwnEventsRequest, opts ...grpc.CallOption) (*GetUserOwnEventsResponse, error) {
	out := new(GetUserOwnEventsResponse)
	err := c.cc.Invoke(ctx, "/swiply.event.Event/GetUserOwnEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventClient) GetUserMembershipEvents(ctx context.Context, in *GetUserMembershipEventsRequest, opts ...grpc.CallOption) (*GetUserMembershipEventsResponse, error) {
	out := new(GetUserMembershipEventsResponse)
	err := c.cc.Invoke(ctx, "/swiply.event.Event/GetUserMembershipEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventClient) GetEventMembers(ctx context.Context, in *GetEventMembersRequest, opts ...grpc.CallOption) (*GetEventMembersResponse, error) {
	out := new(GetEventMembersResponse)
	err := c.cc.Invoke(ctx, "/swiply.event.Event/GetEventMembers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventClient) JoinEvent(ctx context.Context, in *JoinEventRequest, opts ...grpc.CallOption) (*JoinEventResponse, error) {
	out := new(JoinEventResponse)
	err := c.cc.Invoke(ctx, "/swiply.event.Event/JoinEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventClient) AcceptEventJoin(ctx context.Context, in *AcceptEventJoinRequest, opts ...grpc.CallOption) (*AcceptEventJoinResponse, error) {
	out := new(AcceptEventJoinResponse)
	err := c.cc.Invoke(ctx, "/swiply.event.Event/AcceptEventJoin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EventServer is the server API for Event service.
// All implementations must embed UnimplementedEventServer
// for forward compatibility
type EventServer interface {
	CreateEvent(context.Context, *CreateEventRequest) (*CreateEventResponse, error)
	UpdateEvent(context.Context, *UpdateEventRequest) (*UpdateEventResponse, error)
	GetEvents(context.Context, *GetEventsRequest) (*GetEventsResponse, error)
	GetUserOwnEvents(context.Context, *GetUserOwnEventsRequest) (*GetUserOwnEventsResponse, error)
	GetUserMembershipEvents(context.Context, *GetUserMembershipEventsRequest) (*GetUserMembershipEventsResponse, error)
	GetEventMembers(context.Context, *GetEventMembersRequest) (*GetEventMembersResponse, error)
	JoinEvent(context.Context, *JoinEventRequest) (*JoinEventResponse, error)
	AcceptEventJoin(context.Context, *AcceptEventJoinRequest) (*AcceptEventJoinResponse, error)
	mustEmbedUnimplementedEventServer()
}

// UnimplementedEventServer must be embedded to have forward compatible implementations.
type UnimplementedEventServer struct {
}

func (UnimplementedEventServer) CreateEvent(context.Context, *CreateEventRequest) (*CreateEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEvent not implemented")
}
func (UnimplementedEventServer) UpdateEvent(context.Context, *UpdateEventRequest) (*UpdateEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEvent not implemented")
}
func (UnimplementedEventServer) GetEvents(context.Context, *GetEventsRequest) (*GetEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEvents not implemented")
}
func (UnimplementedEventServer) GetUserOwnEvents(context.Context, *GetUserOwnEventsRequest) (*GetUserOwnEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserOwnEvents not implemented")
}
func (UnimplementedEventServer) GetUserMembershipEvents(context.Context, *GetUserMembershipEventsRequest) (*GetUserMembershipEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserMembershipEvents not implemented")
}
func (UnimplementedEventServer) GetEventMembers(context.Context, *GetEventMembersRequest) (*GetEventMembersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEventMembers not implemented")
}
func (UnimplementedEventServer) JoinEvent(context.Context, *JoinEventRequest) (*JoinEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinEvent not implemented")
}
func (UnimplementedEventServer) AcceptEventJoin(context.Context, *AcceptEventJoinRequest) (*AcceptEventJoinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptEventJoin not implemented")
}
func (UnimplementedEventServer) mustEmbedUnimplementedEventServer() {}

// UnsafeEventServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EventServer will
// result in compilation errors.
type UnsafeEventServer interface {
	mustEmbedUnimplementedEventServer()
}

func RegisterEventServer(s grpc.ServiceRegistrar, srv EventServer) {
	s.RegisterService(&Event_ServiceDesc, srv)
}

func _Event_CreateEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServer).CreateEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/swiply.event.Event/CreateEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServer).CreateEvent(ctx, req.(*CreateEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Event_UpdateEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServer).UpdateEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/swiply.event.Event/UpdateEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServer).UpdateEvent(ctx, req.(*UpdateEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Event_GetEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServer).GetEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/swiply.event.Event/GetEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServer).GetEvents(ctx, req.(*GetEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Event_GetUserOwnEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserOwnEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServer).GetUserOwnEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/swiply.event.Event/GetUserOwnEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServer).GetUserOwnEvents(ctx, req.(*GetUserOwnEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Event_GetUserMembershipEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserMembershipEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServer).GetUserMembershipEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/swiply.event.Event/GetUserMembershipEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServer).GetUserMembershipEvents(ctx, req.(*GetUserMembershipEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Event_GetEventMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEventMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServer).GetEventMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/swiply.event.Event/GetEventMembers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServer).GetEventMembers(ctx, req.(*GetEventMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Event_JoinEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServer).JoinEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/swiply.event.Event/JoinEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServer).JoinEvent(ctx, req.(*JoinEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Event_AcceptEventJoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcceptEventJoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServer).AcceptEventJoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/swiply.event.Event/AcceptEventJoin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServer).AcceptEventJoin(ctx, req.(*AcceptEventJoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Event_ServiceDesc is the grpc.ServiceDesc for Event service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Event_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "swiply.event.Event",
	HandlerType: (*EventServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateEvent",
			Handler:    _Event_CreateEvent_Handler,
		},
		{
			MethodName: "UpdateEvent",
			Handler:    _Event_UpdateEvent_Handler,
		},
		{
			MethodName: "GetEvents",
			Handler:    _Event_GetEvents_Handler,
		},
		{
			MethodName: "GetUserOwnEvents",
			Handler:    _Event_GetUserOwnEvents_Handler,
		},
		{
			MethodName: "GetUserMembershipEvents",
			Handler:    _Event_GetUserMembershipEvents_Handler,
		},
		{
			MethodName: "GetEventMembers",
			Handler:    _Event_GetEventMembers_Handler,
		},
		{
			MethodName: "JoinEvent",
			Handler:    _Event_JoinEvent_Handler,
		},
		{
			MethodName: "AcceptEventJoin",
			Handler:    _Event_AcceptEventJoin_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/event.proto",
}
