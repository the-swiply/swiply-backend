// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: api/randomcoffee.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RandomCoffeeClient is the client API for RandomCoffee service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RandomCoffeeClient interface {
	Create(ctx context.Context, in *CreateMeetingRequest, opts ...grpc.CallOption) (*CreateMeetingResponse, error)
	Delete(ctx context.Context, in *DeleteMeetingRequest, opts ...grpc.CallOption) (*DeleteMeetingResponse, error)
	Update(ctx context.Context, in *UpdateMeetingRequest, opts ...grpc.CallOption) (*UpdateMeetingResponse, error)
	List(ctx context.Context, in *ListMeetingsRequest, opts ...grpc.CallOption) (*ListMeetingsResponse, error)
	Get(ctx context.Context, in *GetMeetingRequest, opts ...grpc.CallOption) (*GetMeetingResponse, error)
}

type randomCoffeeClient struct {
	cc grpc.ClientConnInterface
}

func NewRandomCoffeeClient(cc grpc.ClientConnInterface) RandomCoffeeClient {
	return &randomCoffeeClient{cc}
}

func (c *randomCoffeeClient) Create(ctx context.Context, in *CreateMeetingRequest, opts ...grpc.CallOption) (*CreateMeetingResponse, error) {
	out := new(CreateMeetingResponse)
	err := c.cc.Invoke(ctx, "/swiply.randomcoffee.RandomCoffee/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *randomCoffeeClient) Delete(ctx context.Context, in *DeleteMeetingRequest, opts ...grpc.CallOption) (*DeleteMeetingResponse, error) {
	out := new(DeleteMeetingResponse)
	err := c.cc.Invoke(ctx, "/swiply.randomcoffee.RandomCoffee/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *randomCoffeeClient) Update(ctx context.Context, in *UpdateMeetingRequest, opts ...grpc.CallOption) (*UpdateMeetingResponse, error) {
	out := new(UpdateMeetingResponse)
	err := c.cc.Invoke(ctx, "/swiply.randomcoffee.RandomCoffee/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *randomCoffeeClient) List(ctx context.Context, in *ListMeetingsRequest, opts ...grpc.CallOption) (*ListMeetingsResponse, error) {
	out := new(ListMeetingsResponse)
	err := c.cc.Invoke(ctx, "/swiply.randomcoffee.RandomCoffee/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *randomCoffeeClient) Get(ctx context.Context, in *GetMeetingRequest, opts ...grpc.CallOption) (*GetMeetingResponse, error) {
	out := new(GetMeetingResponse)
	err := c.cc.Invoke(ctx, "/swiply.randomcoffee.RandomCoffee/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RandomCoffeeServer is the server API for RandomCoffee service.
// All implementations must embed UnimplementedRandomCoffeeServer
// for forward compatibility
type RandomCoffeeServer interface {
	Create(context.Context, *CreateMeetingRequest) (*CreateMeetingResponse, error)
	Delete(context.Context, *DeleteMeetingRequest) (*DeleteMeetingResponse, error)
	Update(context.Context, *UpdateMeetingRequest) (*UpdateMeetingResponse, error)
	List(context.Context, *ListMeetingsRequest) (*ListMeetingsResponse, error)
	Get(context.Context, *GetMeetingRequest) (*GetMeetingResponse, error)
	mustEmbedUnimplementedRandomCoffeeServer()
}

// UnimplementedRandomCoffeeServer must be embedded to have forward compatible implementations.
type UnimplementedRandomCoffeeServer struct {
}

func (UnimplementedRandomCoffeeServer) Create(context.Context, *CreateMeetingRequest) (*CreateMeetingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedRandomCoffeeServer) Delete(context.Context, *DeleteMeetingRequest) (*DeleteMeetingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedRandomCoffeeServer) Update(context.Context, *UpdateMeetingRequest) (*UpdateMeetingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedRandomCoffeeServer) List(context.Context, *ListMeetingsRequest) (*ListMeetingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedRandomCoffeeServer) Get(context.Context, *GetMeetingRequest) (*GetMeetingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedRandomCoffeeServer) mustEmbedUnimplementedRandomCoffeeServer() {}

// UnsafeRandomCoffeeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RandomCoffeeServer will
// result in compilation errors.
type UnsafeRandomCoffeeServer interface {
	mustEmbedUnimplementedRandomCoffeeServer()
}

func RegisterRandomCoffeeServer(s grpc.ServiceRegistrar, srv RandomCoffeeServer) {
	s.RegisterService(&RandomCoffee_ServiceDesc, srv)
}

func _RandomCoffee_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMeetingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RandomCoffeeServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/swiply.randomcoffee.RandomCoffee/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RandomCoffeeServer).Create(ctx, req.(*CreateMeetingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RandomCoffee_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMeetingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RandomCoffeeServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/swiply.randomcoffee.RandomCoffee/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RandomCoffeeServer).Delete(ctx, req.(*DeleteMeetingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RandomCoffee_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMeetingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RandomCoffeeServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/swiply.randomcoffee.RandomCoffee/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RandomCoffeeServer).Update(ctx, req.(*UpdateMeetingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RandomCoffee_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMeetingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RandomCoffeeServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/swiply.randomcoffee.RandomCoffee/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RandomCoffeeServer).List(ctx, req.(*ListMeetingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RandomCoffee_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMeetingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RandomCoffeeServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/swiply.randomcoffee.RandomCoffee/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RandomCoffeeServer).Get(ctx, req.(*GetMeetingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RandomCoffee_ServiceDesc is the grpc.ServiceDesc for RandomCoffee service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RandomCoffee_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "swiply.randomcoffee.RandomCoffee",
	HandlerType: (*RandomCoffeeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _RandomCoffee_Create_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _RandomCoffee_Delete_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _RandomCoffee_Update_Handler,
		},
		{
			MethodName: "List",
			Handler:    _RandomCoffee_List_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _RandomCoffee_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/randomcoffee.proto",
}
