syntax = "proto3";

option go_package = "github.com/the-swiply/event/pkg/api/event";

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";

package swiply.event;

service Event {
  rpc CreateEvent(CreateEventRequest) returns (CreateEventResponse){
    option (google.api.http) = {
      post: "/v1/event/create"
      body: "*"
    };
  }

  rpc UpdateEvent(UpdateEventRequest) returns (UpdateEventResponse){
    option (google.api.http) = {
      post: "/v1/event/update"
      body: "*"
    };
  }

  rpc GetEvents(GetEventsRequest) returns (GetEventsResponse){
    option (google.api.http) = {
      get: "/v1/events"
    };
  }

  rpc GetUserOwnEvents(GetUserOwnEventsRequest) returns (GetUserOwnEventsResponse){
    option (google.api.http) = {
      get: "/v1/events/my"
    };
  }

  rpc GetUserMembershipEvents(GetUserMembershipEventsRequest) returns (GetUserMembershipEventsResponse){
    option (google.api.http) = {
      get: "/v1/events/membership"
    };
  }

  rpc GetEventMembers(GetEventMembersRequest) returns (GetEventMembersResponse){
    option (google.api.http) = {
      get: "/v1/event/members/{event_id}"
    };
  }


  rpc JoinEvent(JoinEventRequest) returns (JoinEventResponse){
    option (google.api.http) = {
      post: "/v1/event/join/{event_id}"
    };
  }

  rpc AcceptEventJoin(AcceptEventJoinRequest) returns (AcceptEventJoinResponse){
    option (google.api.http) = {
      post: "/v1/event/accept-join/{event_id}"
    };
  }
}

message EventModel {
  int64 event_id = 1;
  string title = 2;
  string description = 3;
  repeated bytes photos = 4;
  int64 chat_id = 5;
  google.protobuf.Timestamp date = 6;
}

message CreateEventRequest {
  // Название
  string title = 1;
  // Описание
  string description = 2;
  // Фотографии
  repeated bytes photos = 3;
  // Дата проведения
  google.protobuf.Timestamp date = 4;
}

message CreateEventResponse {
  // ID мероприятия
  int64 event_id = 1;
}

message UpdateEventRequest {
  // Мероприятие
  EventModel event = 1;
}

message UpdateEventResponse {}

message GetEventsRequest {
  // Размер выдачи
  int64 limit = 1;
  // Начальный сдвиг в выдаче
  int64 offset = 2;
}

message GetEventsResponse{
  // Мероприятия
  repeated EventModel events = 1;
}

message GetUserMembershipEventsRequest {}

message GetUserMembershipEventsResponse {
  // Мероприятия
  repeated EventModel events = 1;
}

message GetUserOwnEventsRequest {}

message GetUserOwnEventsResponse {
  // Мероприятия
  repeated EventModel events = 1;
}

message GetEventMembersRequest {
  // ID мероприятия
  int64 event_id = 1;
}

enum UserEventStatus {
  USER_EVENT_STATUS_UNKNOWN = 0;
  // Запросил присоединиться к мероприятию
  JOIN_REQUEST = 1;
  // Участник мероприятия
  MEMBER = 2;
}

message GetEventMembersResponse {
  message UserWithEventStatus {
    // ID пользователя
    string user_id = 1;
    // Статус пользователя в мероприятии
    UserEventStatus status = 2;
  }

  // Пользователи и их статусы в мероприятии
  repeated UserWithEventStatus users_statuses = 1;
}

message JoinEventRequest {
  // ID мероприятия
  int64 event_id = 1;
}

message JoinEventResponse {}

message AcceptEventJoinRequest {
  // ID мероприятия
  int64 event_id = 1;
  // ID пользователя, добавляемого в участники мероприятия
  string user_id = 2;
}

message AcceptEventJoinResponse {}
