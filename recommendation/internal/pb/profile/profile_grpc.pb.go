// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: api/profile.proto

package profile

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProfileClient is the client API for Profile service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProfileClient interface {
	Create(ctx context.Context, in *CreateProfileRequest, opts ...grpc.CallOption) (*CreateProfileResponse, error)
	Update(ctx context.Context, in *UpdateProfileRequest, opts ...grpc.CallOption) (*UpdateProfileResponse, error)
	Get(ctx context.Context, in *GetProfileRequest, opts ...grpc.CallOption) (*GetProfileResponse, error)
	WhoAmI(ctx context.Context, in *WhoAmIRequest, opts ...grpc.CallOption) (*WhoAmIResponse, error)
	GetRecommendations(ctx context.Context, in *GetRecommendationsRequest, opts ...grpc.CallOption) (*GetRecommendationsResponse, error)
	Interaction(ctx context.Context, in *InteractionRequest, opts ...grpc.CallOption) (*InteractionResponse, error)
	Liked(ctx context.Context, in *LikedRequest, opts ...grpc.CallOption) (*LikedResponse, error)
	LikedMe(ctx context.Context, in *LikedMeRequest, opts ...grpc.CallOption) (*LikedMeResponse, error)
	ListInterests(ctx context.Context, in *ListInterestsRequest, opts ...grpc.CallOption) (*ListInterestsResponse, error)
	ListInteractions(ctx context.Context, in *ListInteractionsRequest, opts ...grpc.CallOption) (*ListInteractionsResponse, error)
	ListProfiles(ctx context.Context, in *ListProfilesRequest, opts ...grpc.CallOption) (*ListProfilesResponse, error)
}

type profileClient struct {
	cc grpc.ClientConnInterface
}

func NewProfileClient(cc grpc.ClientConnInterface) ProfileClient {
	return &profileClient{cc}
}

func (c *profileClient) Create(ctx context.Context, in *CreateProfileRequest, opts ...grpc.CallOption) (*CreateProfileResponse, error) {
	out := new(CreateProfileResponse)
	err := c.cc.Invoke(ctx, "/swiply.profile.Profile/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileClient) Update(ctx context.Context, in *UpdateProfileRequest, opts ...grpc.CallOption) (*UpdateProfileResponse, error) {
	out := new(UpdateProfileResponse)
	err := c.cc.Invoke(ctx, "/swiply.profile.Profile/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileClient) Get(ctx context.Context, in *GetProfileRequest, opts ...grpc.CallOption) (*GetProfileResponse, error) {
	out := new(GetProfileResponse)
	err := c.cc.Invoke(ctx, "/swiply.profile.Profile/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileClient) WhoAmI(ctx context.Context, in *WhoAmIRequest, opts ...grpc.CallOption) (*WhoAmIResponse, error) {
	out := new(WhoAmIResponse)
	err := c.cc.Invoke(ctx, "/swiply.profile.Profile/WhoAmI", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileClient) GetRecommendations(ctx context.Context, in *GetRecommendationsRequest, opts ...grpc.CallOption) (*GetRecommendationsResponse, error) {
	out := new(GetRecommendationsResponse)
	err := c.cc.Invoke(ctx, "/swiply.profile.Profile/GetRecommendations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileClient) Interaction(ctx context.Context, in *InteractionRequest, opts ...grpc.CallOption) (*InteractionResponse, error) {
	out := new(InteractionResponse)
	err := c.cc.Invoke(ctx, "/swiply.profile.Profile/Interaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileClient) Liked(ctx context.Context, in *LikedRequest, opts ...grpc.CallOption) (*LikedResponse, error) {
	out := new(LikedResponse)
	err := c.cc.Invoke(ctx, "/swiply.profile.Profile/Liked", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileClient) LikedMe(ctx context.Context, in *LikedMeRequest, opts ...grpc.CallOption) (*LikedMeResponse, error) {
	out := new(LikedMeResponse)
	err := c.cc.Invoke(ctx, "/swiply.profile.Profile/LikedMe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileClient) ListInterests(ctx context.Context, in *ListInterestsRequest, opts ...grpc.CallOption) (*ListInterestsResponse, error) {
	out := new(ListInterestsResponse)
	err := c.cc.Invoke(ctx, "/swiply.profile.Profile/ListInterests", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileClient) ListInteractions(ctx context.Context, in *ListInteractionsRequest, opts ...grpc.CallOption) (*ListInteractionsResponse, error) {
	out := new(ListInteractionsResponse)
	err := c.cc.Invoke(ctx, "/swiply.profile.Profile/ListInteractions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileClient) ListProfiles(ctx context.Context, in *ListProfilesRequest, opts ...grpc.CallOption) (*ListProfilesResponse, error) {
	out := new(ListProfilesResponse)
	err := c.cc.Invoke(ctx, "/swiply.profile.Profile/ListProfiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProfileServer is the server API for Profile service.
// All implementations must embed UnimplementedProfileServer
// for forward compatibility
type ProfileServer interface {
	Create(context.Context, *CreateProfileRequest) (*CreateProfileResponse, error)
	Update(context.Context, *UpdateProfileRequest) (*UpdateProfileResponse, error)
	Get(context.Context, *GetProfileRequest) (*GetProfileResponse, error)
	WhoAmI(context.Context, *WhoAmIRequest) (*WhoAmIResponse, error)
	GetRecommendations(context.Context, *GetRecommendationsRequest) (*GetRecommendationsResponse, error)
	Interaction(context.Context, *InteractionRequest) (*InteractionResponse, error)
	Liked(context.Context, *LikedRequest) (*LikedResponse, error)
	LikedMe(context.Context, *LikedMeRequest) (*LikedMeResponse, error)
	ListInterests(context.Context, *ListInterestsRequest) (*ListInterestsResponse, error)
	ListInteractions(context.Context, *ListInteractionsRequest) (*ListInteractionsResponse, error)
	ListProfiles(context.Context, *ListProfilesRequest) (*ListProfilesResponse, error)
	mustEmbedUnimplementedProfileServer()
}

// UnimplementedProfileServer must be embedded to have forward compatible implementations.
type UnimplementedProfileServer struct {
}

func (UnimplementedProfileServer) Create(context.Context, *CreateProfileRequest) (*CreateProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedProfileServer) Update(context.Context, *UpdateProfileRequest) (*UpdateProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedProfileServer) Get(context.Context, *GetProfileRequest) (*GetProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedProfileServer) WhoAmI(context.Context, *WhoAmIRequest) (*WhoAmIResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WhoAmI not implemented")
}
func (UnimplementedProfileServer) GetRecommendations(context.Context, *GetRecommendationsRequest) (*GetRecommendationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecommendations not implemented")
}
func (UnimplementedProfileServer) Interaction(context.Context, *InteractionRequest) (*InteractionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Interaction not implemented")
}
func (UnimplementedProfileServer) Liked(context.Context, *LikedRequest) (*LikedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Liked not implemented")
}
func (UnimplementedProfileServer) LikedMe(context.Context, *LikedMeRequest) (*LikedMeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LikedMe not implemented")
}
func (UnimplementedProfileServer) ListInterests(context.Context, *ListInterestsRequest) (*ListInterestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListInterests not implemented")
}
func (UnimplementedProfileServer) ListInteractions(context.Context, *ListInteractionsRequest) (*ListInteractionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListInteractions not implemented")
}
func (UnimplementedProfileServer) ListProfiles(context.Context, *ListProfilesRequest) (*ListProfilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProfiles not implemented")
}
func (UnimplementedProfileServer) mustEmbedUnimplementedProfileServer() {}

// UnsafeProfileServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProfileServer will
// result in compilation errors.
type UnsafeProfileServer interface {
	mustEmbedUnimplementedProfileServer()
}

func RegisterProfileServer(s grpc.ServiceRegistrar, srv ProfileServer) {
	s.RegisterService(&Profile_ServiceDesc, srv)
}

func _Profile_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/swiply.profile.Profile/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServer).Create(ctx, req.(*CreateProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Profile_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/swiply.profile.Profile/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServer).Update(ctx, req.(*UpdateProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Profile_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/swiply.profile.Profile/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServer).Get(ctx, req.(*GetProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Profile_WhoAmI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WhoAmIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServer).WhoAmI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/swiply.profile.Profile/WhoAmI",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServer).WhoAmI(ctx, req.(*WhoAmIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Profile_GetRecommendations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecommendationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServer).GetRecommendations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/swiply.profile.Profile/GetRecommendations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServer).GetRecommendations(ctx, req.(*GetRecommendationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Profile_Interaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InteractionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServer).Interaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/swiply.profile.Profile/Interaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServer).Interaction(ctx, req.(*InteractionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Profile_Liked_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LikedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServer).Liked(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/swiply.profile.Profile/Liked",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServer).Liked(ctx, req.(*LikedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Profile_LikedMe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LikedMeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServer).LikedMe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/swiply.profile.Profile/LikedMe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServer).LikedMe(ctx, req.(*LikedMeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Profile_ListInterests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListInterestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServer).ListInterests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/swiply.profile.Profile/ListInterests",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServer).ListInterests(ctx, req.(*ListInterestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Profile_ListInteractions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListInteractionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServer).ListInteractions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/swiply.profile.Profile/ListInteractions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServer).ListInteractions(ctx, req.(*ListInteractionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Profile_ListProfiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProfilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServer).ListProfiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/swiply.profile.Profile/ListProfiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServer).ListProfiles(ctx, req.(*ListProfilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Profile_ServiceDesc is the grpc.ServiceDesc for Profile service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Profile_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "swiply.profile.Profile",
	HandlerType: (*ProfileServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Profile_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Profile_Update_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Profile_Get_Handler,
		},
		{
			MethodName: "WhoAmI",
			Handler:    _Profile_WhoAmI_Handler,
		},
		{
			MethodName: "GetRecommendations",
			Handler:    _Profile_GetRecommendations_Handler,
		},
		{
			MethodName: "Interaction",
			Handler:    _Profile_Interaction_Handler,
		},
		{
			MethodName: "Liked",
			Handler:    _Profile_Liked_Handler,
		},
		{
			MethodName: "LikedMe",
			Handler:    _Profile_LikedMe_Handler,
		},
		{
			MethodName: "ListInterests",
			Handler:    _Profile_ListInterests_Handler,
		},
		{
			MethodName: "ListInteractions",
			Handler:    _Profile_ListInteractions_Handler,
		},
		{
			MethodName: "ListProfiles",
			Handler:    _Profile_ListProfiles_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/profile.proto",
}

// PhotoClient is the client API for Photo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PhotoClient interface {
	Create(ctx context.Context, in *CreatePhotoRequest, opts ...grpc.CallOption) (*CreatePhotoResponse, error)
	Get(ctx context.Context, in *GetPhotoRequest, opts ...grpc.CallOption) (*GetPhotoResponse, error)
	List(ctx context.Context, in *ListPhotoRequest, opts ...grpc.CallOption) (*ListPhotoResponse, error)
	Delete(ctx context.Context, in *DeletePhotoRequest, opts ...grpc.CallOption) (*DeletePhotoResponse, error)
	Reorder(ctx context.Context, in *ReorderPhotoRequest, opts ...grpc.CallOption) (*ReorderPhotoResponse, error)
}

type photoClient struct {
	cc grpc.ClientConnInterface
}

func NewPhotoClient(cc grpc.ClientConnInterface) PhotoClient {
	return &photoClient{cc}
}

func (c *photoClient) Create(ctx context.Context, in *CreatePhotoRequest, opts ...grpc.CallOption) (*CreatePhotoResponse, error) {
	out := new(CreatePhotoResponse)
	err := c.cc.Invoke(ctx, "/swiply.profile.Photo/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *photoClient) Get(ctx context.Context, in *GetPhotoRequest, opts ...grpc.CallOption) (*GetPhotoResponse, error) {
	out := new(GetPhotoResponse)
	err := c.cc.Invoke(ctx, "/swiply.profile.Photo/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *photoClient) List(ctx context.Context, in *ListPhotoRequest, opts ...grpc.CallOption) (*ListPhotoResponse, error) {
	out := new(ListPhotoResponse)
	err := c.cc.Invoke(ctx, "/swiply.profile.Photo/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *photoClient) Delete(ctx context.Context, in *DeletePhotoRequest, opts ...grpc.CallOption) (*DeletePhotoResponse, error) {
	out := new(DeletePhotoResponse)
	err := c.cc.Invoke(ctx, "/swiply.profile.Photo/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *photoClient) Reorder(ctx context.Context, in *ReorderPhotoRequest, opts ...grpc.CallOption) (*ReorderPhotoResponse, error) {
	out := new(ReorderPhotoResponse)
	err := c.cc.Invoke(ctx, "/swiply.profile.Photo/Reorder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PhotoServer is the server API for Photo service.
// All implementations must embed UnimplementedPhotoServer
// for forward compatibility
type PhotoServer interface {
	Create(context.Context, *CreatePhotoRequest) (*CreatePhotoResponse, error)
	Get(context.Context, *GetPhotoRequest) (*GetPhotoResponse, error)
	List(context.Context, *ListPhotoRequest) (*ListPhotoResponse, error)
	Delete(context.Context, *DeletePhotoRequest) (*DeletePhotoResponse, error)
	Reorder(context.Context, *ReorderPhotoRequest) (*ReorderPhotoResponse, error)
	mustEmbedUnimplementedPhotoServer()
}

// UnimplementedPhotoServer must be embedded to have forward compatible implementations.
type UnimplementedPhotoServer struct {
}

func (UnimplementedPhotoServer) Create(context.Context, *CreatePhotoRequest) (*CreatePhotoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedPhotoServer) Get(context.Context, *GetPhotoRequest) (*GetPhotoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedPhotoServer) List(context.Context, *ListPhotoRequest) (*ListPhotoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedPhotoServer) Delete(context.Context, *DeletePhotoRequest) (*DeletePhotoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedPhotoServer) Reorder(context.Context, *ReorderPhotoRequest) (*ReorderPhotoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reorder not implemented")
}
func (UnimplementedPhotoServer) mustEmbedUnimplementedPhotoServer() {}

// UnsafePhotoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PhotoServer will
// result in compilation errors.
type UnsafePhotoServer interface {
	mustEmbedUnimplementedPhotoServer()
}

func RegisterPhotoServer(s grpc.ServiceRegistrar, srv PhotoServer) {
	s.RegisterService(&Photo_ServiceDesc, srv)
}

func _Photo_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePhotoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhotoServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/swiply.profile.Photo/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhotoServer).Create(ctx, req.(*CreatePhotoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Photo_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPhotoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhotoServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/swiply.profile.Photo/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhotoServer).Get(ctx, req.(*GetPhotoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Photo_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPhotoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhotoServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/swiply.profile.Photo/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhotoServer).List(ctx, req.(*ListPhotoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Photo_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePhotoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhotoServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/swiply.profile.Photo/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhotoServer).Delete(ctx, req.(*DeletePhotoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Photo_Reorder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReorderPhotoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhotoServer).Reorder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/swiply.profile.Photo/Reorder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhotoServer).Reorder(ctx, req.(*ReorderPhotoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Photo_ServiceDesc is the grpc.ServiceDesc for Photo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Photo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "swiply.profile.Photo",
	HandlerType: (*PhotoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Photo_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Photo_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Photo_List_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Photo_Delete_Handler,
		},
		{
			MethodName: "Reorder",
			Handler:    _Photo_Reorder_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/profile.proto",
}
